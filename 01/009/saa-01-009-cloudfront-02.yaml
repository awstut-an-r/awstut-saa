AWSTemplateFormatVersion: 2010-09-09

Parameters:
  Architecture:
    Type: String
    
  #BucketArn:
  #  Type: String
  
  Handler:
    Type: String
    
  #MemorySize:
  #  Type: Number
    
  Prefix:
    Type: String
    
  PrimaryDistribution:
    Type: String
    
  #ProdBucketArn:
  #  Type: String
    
  Runtime:
    Type: String
    
  #StgBucketArn:
  #  Type: String
  
  StagingDistributionDnsName:
    Type: String
    
    
Resources:
  ContinuousDeploymentPolicy:
    Type: AWS::CloudFront::ContinuousDeploymentPolicy
    Properties:
      ContinuousDeploymentPolicyConfig: 
        Enabled: true
        #SingleHeaderPolicyConfig: 
        #  SingleHeaderPolicyConfig
        SingleWeightPolicyConfig: 
          #SessionStickinessConfig: 
          #  SessionStickinessConfig
          Weight: .10
        StagingDistributionDnsNames: 
          - !Ref StagingDistributionDnsName
        #TrafficConfig: 
        #  TrafficConfig
        Type: SingleWeight
        
  CustomResource:
    Type: Custom::CustomResource
    Properties:
      #BucketName: !Ref BucketName
      ContinuousDeploymentPolicy: !Ref ContinuousDeploymentPolicy
      Distribution: !Ref PrimaryDistribution
      #ServiceToken: !Ref FunctionArn
      ServiceToken: !GetAtt Function.Arn
      
  Function:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import os
          
          cloudfront_client = boto3.client('cloudfront')
           
          CREATE = 'Create'
          DELETE = 'Delete'
          response_data = {}
          
          def lambda_handler(event, context):
            try:
              distribution = event['ResourceProperties']['Distribution']
              policy = event['ResourceProperties']['ContinuousDeploymentPolicy']
              
              get_response = cloudfront_client.get_distribution_config(
                Id=distribution
                )
              #print(get_response)
              #pprint.pprint(get_response)
                
              update_config = get_response['DistributionConfig']
              #pprint.pprint(update_config)
              etag = get_response['ETag']
              
              if event['RequestType'] == CREATE:
                update_config['ContinuousDeploymentPolicyId'] = policy
                
                update_response = cloudfront_client.update_distribution(
                  DistributionConfig=update_config,
                  Id=distribution,
                  IfMatch=etag
                  )
                print(update_response)
                
              elif event['RequestType'] == DELETE:
                update_config['ContinuousDeploymentPolicyId'] = ''
                
                update_response = cloudfront_client.update_distribution(
                  DistributionConfig=update_config,
                  Id=distribution,
                  IfMatch=etag
                )
                print(update_response)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              
            except Exception as e:
              print(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      #Environment:
      #  Variables:
      #    BUCKET_NAME: !Ref BucketName
      FunctionName: !Sub "${Prefix}-function-01"
      Handler: !Ref Handler
      Runtime: !Ref Runtime
      Role: !GetAtt FunctionRole.Arn

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${Prefix}-CloudFrontPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudfront:GetDistribution
                  - cloudfront:GetDistributionConfig
                  - cloudfront:UpdateDistribution
                Resource:
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${PrimaryDistribution}"
                  

#Outputs:
#  #BucketArn:
#  
#  FunctionArn:
#    Value: !GetAtt Function.Arn