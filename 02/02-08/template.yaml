AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  saa-02-08

  Sample SAM Template for saa-02-08
  
Parameters:
  Prefix:
    Type: String
    Default: saa-02-08
    
  BucketName:
    Type: String
    Default: saa-02-08-bucket
    
  StageName:
    Type: String
    Default: prod


Globals:
  Function:
    Environment:
      Variables:
        REGION_NAME: ap-northeast-1
        S3_BUCKET_NAME: !Ref BucketName
        IMG_ORIGINAL_FOLDER_NAME: img-original
        IMG_CONVERTED_FOLDER_NAME: img-converted
        IMG_DOWNLOAD_PATH: /tmp/{img_file}
    Timeout: 10


Resources:
  PublicS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      WebsiteConfiguration:
        IndexDocument: index.html
      
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PublicS3Bucket
      PolicyDocument:
        Statement:
          Action:
            - s3:GetObject
          Effect: Allow
          Resource: !Sub arn:aws:s3:::${BucketName}/* 
          Principal: "*"
          
          
  PhotoApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt PhotoApiLogGroup.Arn 
        Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] $context.httpMethod $context.resourcePath $context.protocol $context.status $context.responseLength $context.requestId $context.error.message $context.integrationErrorMessage
      StageName: !Ref StageName

  PhotoApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: PhotoApi
      RetentionInDays: 1


  GetPhotoListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-photo-list/
      Handler: app1.lambda_handler
      Role: !GetAtt PhotoFunctionRole.Arn
      Runtime: python3.8
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref PhotoApi
            Method: GET
            Path: /api/list
  

  ConvertPhotoModeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/convert-photo-mode/
      Handler: app2.lambda_handler
      MemorySize: 512
      Role: !GetAtt PhotoFunctionRole.Arn
      Runtime: python3.8
      Events:
        ExplicitApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref PhotoApi
            Method: POST
            Path: /api/convert
            
  PhotoFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        
        
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          TargetOriginId: !Sub s3-${PublicS3Bucket}
          ViewerProtocolPolicy: allow-all
          DefaultTTL: 3600
          MaxTTL: 3600
          MinTTL: 3600
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            Compress: true
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: false
            PathPattern: /api/*
            TargetOriginId: !Sub api-gateway-${PhotoApi}
            ViewerProtocolPolicy: redirect-to-https
            DefaultTTL: 0
            MaxTTL: 0
            MinTTL: 0
        DefaultRootObject: index.html
        Enabled: true
        Origins:
          - DomainName: !GetAtt PublicS3Bucket.DomainName
            Id: !Sub s3-${PublicS3Bucket}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - DomainName: !Sub ${PhotoApi}.execute-api.ap-northeast-1.amazonaws.com
            Id: !Sub api-gateway-${PhotoApi}
            OriginPath: !Sub /${StageName}
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
