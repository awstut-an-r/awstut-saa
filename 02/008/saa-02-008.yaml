AWSTemplateFormatVersion: 2010-09-09

Parameters:
  TemplateBucketName:
    Type: String
    Default: [bucket-name]
    
  Prefix:
    Type: String
    Default: saa-02-008
    
  AvailabilityZone1:
    Type: String
    Default: a
    
  AvailabilityZone2:
    Type: String
    Default: c
    
  AvailabilityZone3:
    Type: String
    Default: d
    
  DBClusterCustomEndpoint1:
    Type: String
    Default: custom-endpoint1
    
  DBClusterCustomEndpoint2:
    Type: String
    Default: custom-endpoint2
    
  HTTPSPort:
    Type: Number
    Default: 443
    
  MySQLPort:
    Type: Number
    Default: 3306
    

Resources:
  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-vpc.yaml"
      Parameters:
        AvailabilityZone1: !Ref AvailabilityZone1
        AvailabilityZone2: !Ref AvailabilityZone2
        AvailabilityZone3: !Ref AvailabilityZone3
        CidrIp1: 10.0.1.0/24
        CidrIp2: 10.0.2.0/24
        CidrIp3: 10.0.3.0/24
        CidrIp4: 10.0.4.0/24
        HTTPSPort: !Ref HTTPSPort
        MySQLPort: !Ref MySQLPort
        Prefix: !Ref Prefix
        VPCCidrBlock: 10.0.0.0/16

  EndpointStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VPCStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-endpoint.yaml"
      Parameters:
        EndpointSecurityGroup: !GetAtt VPCStack.Outputs.EndpointSecurityGroup
        InstanceSubnet: !GetAtt VPCStack.Outputs.InstanceSubnet
        InstanceSubnetRouteTable: !GetAtt VPCStack.Outputs.InstanceSubnetRouteTable
        Prefix: !Ref Prefix
        VPC: !GetAtt VPCStack.Outputs.VPC
        
  EC2Stack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - EndpointStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-ec2.yaml"
      Parameters:
        ImageId: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
        InstanceSecurityGroup: !GetAtt VPCStack.Outputs.InstanceSecurityGroup
        InstanceSubnet: !GetAtt VPCStack.Outputs.InstanceSubnet
        InstanceType: t4g.nano
        Prefix: !Ref Prefix
        
  AuroraStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - VPCStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-aurora.yaml"
      Parameters:
        AvailabilityZone1: !Ref AvailabilityZone1
        AvailabilityZone2: !Ref AvailabilityZone2
        AvailabilityZone3: !Ref AvailabilityZone3
        DBUser: testuser
        DBPassword: Passw0rd
        DBName: testdb
        DBEngine: aurora-mysql
        DBEngineVersion: 8.0.mysql_aurora.3.01.0
        DBInstanceClass: db.t4g.medium
        DBSecurityGroup: !GetAtt VPCStack.Outputs.DBSecurityGroup
        DBSubnet1: !GetAtt VPCStack.Outputs.DBSubnet1
        DBSubnet2: !GetAtt VPCStack.Outputs.DBSubnet2
        DBSubnet3: !GetAtt VPCStack.Outputs.DBSubnet3
        Prefix: !Ref Prefix

  LambdaStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - AuroraStack
    Properties:
      TemplateURL: !Sub "https://${TemplateBucketName}.s3.${AWS::Region}.amazonaws.com/${Prefix}/${Prefix}-lambda.yaml"
      Parameters:
        DBClusterCustomEndpoint1: !Ref DBClusterCustomEndpoint1
        DBClusterCustomEndpoint2: !Ref DBClusterCustomEndpoint2
        DBClusterIdentifier: !GetAtt AuroraStack.Outputs.DBCluster
        Handler: index.lambda_handler
        Prefix: !Ref Prefix
        Runtime: python3.8
